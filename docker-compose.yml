# Aegis Fraud Detection System - Docker Compose Configuration
# Professional multi-service development environment

version: '3.8'

services:
  # Main application development environment
  aegis-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: aegis-fraud-detector-dev
    ports:
      - "8888:8888"  # Jupyter Lab
    volumes:
      - .:/workspace
      - ./data:/workspace/data
      - ./artifacts:/workspace/artifacts
      - ./logs:/workspace/logs
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - PYTHONPATH=/workspace
    networks:
      - aegis-network
    depends_on:
      - mlflow
    stdin_open: true
    tty: true

  # MLflow tracking server
  mlflow:
    build:
      context: .
      dockerfile: Dockerfile
      target: mlflow
    container_name: aegis-mlflow-server
    ports:
      - "5000:5000"  # MLflow UI
    volumes:
      - ./mlruns:/home/mlflow/mlruns
      - ./artifacts:/home/mlflow/artifacts
      - ./mlflow.db:/home/mlflow/mlflow.db
    environment:
      - MLFLOW_BACKEND_STORE_URI=sqlite:///mlflow.db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/home/mlflow/artifacts
    networks:
      - aegis-network
    restart: unless-stopped

  # PostgreSQL database for MLflow (optional, for production)
  postgres:
    image: postgres:13
    container_name: aegis-postgres
    environment:
      - POSTGRES_DB=mlflow
      - POSTGRES_USER=mlflow
      - POSTGRES_PASSWORD=mlflow_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - aegis-network
    ports:
      - "5432:5432"
    profiles:
      - production

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: aegis-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - aegis-network
    command: redis-server --appendonly yes
    profiles:
      - production

  # Model serving API (for production deployment)
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: aegis-api
    ports:
      - "8000:8000"
    volumes:
      - ./models:/home/aegis/models
      - ./logs:/home/aegis/logs
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MODEL_PATH=/home/aegis/models
      - LOG_LEVEL=INFO
    networks:
      - aegis-network
    depends_on:
      - mlflow
      - redis
    restart: unless-stopped
    profiles:
      - production

  # Monitoring dashboard (Grafana)
  grafana:
    image: grafana/grafana:latest
    container_name: aegis-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - aegis-network
    profiles:
      - monitoring

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: aegis-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - aegis-network
    profiles:
      - monitoring

networks:
  aegis-network:
    driver: bridge
    name: aegis-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

# Development profile (default)
# Usage: docker-compose up

# Production profile
# Usage: docker-compose --profile production up

# Monitoring profile
# Usage: docker-compose --profile monitoring up

# All services
# Usage: docker-compose --profile production --profile monitoring up
