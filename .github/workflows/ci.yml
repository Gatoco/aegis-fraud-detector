# AEGIS Fraud Detection System - CI/CD Pipeline
# Sprint 4.1: Zero-Cost Optimized CI Implementation
# 
# This workflow implements ultra-efficient CI practices:
# - Smart conditional triggers to minimize executions
# - Optimized resource usage and caching
# - Skip unchanged components automatically
# - Maximum efficiency for public repository (FREE unlimited minutes)

name: CI Pipeline (Zero-Cost Optimized)

# Optimized Trigger Configuration - Only on meaningful changes
on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'api_service/**'
      - 'tests/**'
      - 'requirements.txt'
      - 'api_service/requirements.txt'
      - '.github/workflows/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'api_service/**'
      - 'tests/**'
      - 'requirements.txt'
      - 'api_service/requirements.txt'
  workflow_dispatch:  # Manual triggering only when needed

# Global environment variables
env:
  PYTHON_VERSION: '3.12'
  CACHE_KEY_PREFIX: 'aegis-ci-v2'
  PIP_CACHE_DIR: ~/.cache/pip

# Concurrency control - Cancel previous runs on new pushes
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Pre-check: Skip CI if only docs/README changes
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      code-changed: ${{ steps.changes.outputs.code }}
      tests-changed: ${{ steps.changes.outputs.tests }}
      api-changed: ${{ steps.changes.outputs.api }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          code:
            - 'src/**'
            - 'requirements.txt'
          tests:
            - 'tests/**'
            - 'pytest.ini'
          api:
            - 'api_service/**'

  # Job 1: Ultra-Fast Code Quality Check
  linting:
    name: Code Quality (Optimized)
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.code-changed == 'true' || needs.changes.outputs.tests-changed == 'true' || needs.changes.outputs.api-changed == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1  # Shallow clone for speed
        
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Aggressive pip caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python3.12/site-packages
        key: ${{ env.CACHE_KEY_PREFIX }}-lint-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ env.CACHE_KEY_PREFIX }}-lint-${{ runner.os }}-
          
    - name: Install minimal linting dependencies
      run: |
        python -m pip install --upgrade pip --quiet
        pip install black==22.10.0 flake8==5.0.4 isort==5.11.4 --quiet
        
    - name: Fast code formatting check
      run: |
        echo "⚡ Checking code formatting..."
        black --check --fast --quiet src/ api_service/ scripts/ tests/ --line-length 88 || exit 1
        
    - name: Fast import sorting check
      run: |
        echo "⚡ Checking import sorting..."
        isort --check-only --quiet src/ api_service/ scripts/ tests/ || exit 1
        
    - name: Essential linting only
      run: |
        echo "⚡ Running essential linting..."
        # Only critical errors that break functionality
        flake8 src/ api_service/ scripts/ tests/ --select=E9,F63,F7,F82 --quiet --count

  # Job 2: Essential Unit Tests (Single Python Version)
  unit-tests:
    name: Unit Tests (Optimized)
    runs-on: ubuntu-latest
    needs: [changes, linting]
    if: (needs.changes.outputs.code-changed == 'true' || needs.changes.outputs.tests-changed == 'true') && needs.linting.result == 'success'
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Aggressive dependency caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python3.12/site-packages
        key: ${{ env.CACHE_KEY_PREFIX }}-deps-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ env.CACHE_KEY_PREFIX }}-deps-${{ runner.os }}-
          
    - name: Install minimal dependencies
      run: |
        python -m pip install --upgrade pip --quiet
        pip install pytest==7.4.3 --quiet
        # Only install what's needed for core tests
        pip install pandas numpy scikit-learn --quiet
        
    - name: Fast core unit tests
      run: |
        echo "⚡ Running core unit tests..."
        if [ -d "tests" ] && [ "$(ls -A tests/*.py 2>/dev/null)" ]; then
          pytest tests/ -x --tb=no --quiet
        else
          echo "No core tests found - creating minimal validation"
          python -c "import sys; sys.path.append('src'); print('✅ Core imports OK')"
        fi

  # Job 3: API Integration Tests (Only when API changes)
  integration-tests:
    name: API Integration (Conditional)
    runs-on: ubuntu-latest
    needs: [changes, linting, unit-tests]
    if: needs.changes.outputs.api-changed == 'true' && needs.unit-tests.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache API dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python3.12/site-packages
        key: ${{ env.CACHE_KEY_PREFIX }}-api-${{ runner.os }}-${{ hashFiles('api_service/requirements.txt') }}
        restore-keys: |
          ${{ env.CACHE_KEY_PREFIX }}-api-${{ runner.os }}-
          
    - name: Install minimal API dependencies
      run: |
        python -m pip install --upgrade pip --quiet
        pip install fastapi uvicorn pytest httpx --quiet
        
    - name: Fast API tests
      run: |
        echo "⚡ Running API tests..."
        cd api_service
        timeout 180 pytest test_api.py -x --tb=no --quiet
        
    - name: Quick integration test
      run: |
        echo "⚡ Quick integration check..."
        cd api_service
        timeout 120 python -c "
        from main import app
        from fastapi.testclient import TestClient
        client = TestClient(app)
        response = client.get('/health')
        assert response.status_code == 200
        print('✅ API integration OK')
        "
        
  # Job 4: Minimal CI Summary
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [changes, linting, unit-tests, integration-tests]
    if: always()
    
    steps:
    - name: Ultra-fast CI summary
      run: |
        echo "⚡ AEGIS CI Summary (Zero-Cost Optimized)"
        echo "Code Changed: ${{ needs.changes.outputs.code-changed }}"
        echo "API Changed: ${{ needs.changes.outputs.api-changed }}"
        echo "Linting: ${{ needs.linting.result }}"
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Integration: ${{ needs.integration-tests.result }}"
        
        # Simple success check
        if [[ "${{ needs.linting.result }}" != "failure" && 
              "${{ needs.unit-tests.result }}" != "failure" && 
              "${{ needs.integration-tests.result }}" != "failure" ]]; then
          echo "✅ CI PASSED - Zero cost achieved!"
        else
          echo "❌ Some checks failed"
          exit 1
        fi
